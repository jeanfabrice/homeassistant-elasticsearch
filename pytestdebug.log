versions pytest-6.2.1, py-1.10.0, python-3.9.0.final.0
cwd=/workspaces/homeassistant-elasticsearch
args=('--debug',)

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x7fda70069a60>
    pytest_plugin_registered [hook]
        plugin: <Session homeassistant-elasticsearch exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x7fda70069a60>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7fda6d713ac0>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7fda6d713c40>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_configure [hook]
          config: <_pytest.config.Config object at 0x7fda70069a60>
      finish pytest_configure --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x7fda6d713d00>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7fda70069a60>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/usr/local/lib/python3.9/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/usr/local/lib/python3.9/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/usr/local/lib/python3.9/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/usr/local/lib/python3.9/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/usr/local/lib/python3.9/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/usr/local/lib/python3.9/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/usr/local/lib/python3.9/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/usr/local/lib/python3.9/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/usr/local/lib/python3.9/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/usr/local/lib/python3.9/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/usr/local/lib/python3.9/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/usr/local/lib/python3.9/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/usr/local/lib/python3.9/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/usr/local/lib/python3.9/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/usr/local/lib/python3.9/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/usr/local/lib/python3.9/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/usr/local/lib/python3.9/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/usr/local/lib/python3.9/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/usr/local/lib/python3.9/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/usr/local/lib/python3.9/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/usr/local/lib/python3.9/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/usr/local/lib/python3.9/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/usr/local/lib/python3.9/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/usr/local/lib/python3.9/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/usr/local/lib/python3.9/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/usr/local/lib/python3.9/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/usr/local/lib/python3.9/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/usr/local/lib/python3.9/site-packages/_pytest/unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/usr/local/lib/python3.9/site-packages/_pytest/threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/usr/local/lib/python3.9/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/usr/local/lib/python3.9/site-packages/pytest_cov/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_asyncio.plugin' from '/usr/local/lib/python3.9/site-packages/pytest_asyncio/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_cov.plugin.CovPlugin object at 0x7fda6f478070>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'tests.conftest' from '/workspaces/homeassistant-elasticsearch/tests/conftest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session homeassistant-elasticsearch exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7fda6d713ac0>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7fda6d713c40>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x7fda6d713d00>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7fda6d7220d0>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7fda6d746490>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session homeassistant-elasticsearch exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7fda70069a60>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/usr/local/lib/python3.9/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/usr/local/lib/python3.9/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/usr/local/lib/python3.9/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/usr/local/lib/python3.9/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/usr/local/lib/python3.9/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/usr/local/lib/python3.9/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/usr/local/lib/python3.9/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/usr/local/lib/python3.9/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/usr/local/lib/python3.9/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/usr/local/lib/python3.9/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/usr/local/lib/python3.9/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/usr/local/lib/python3.9/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/usr/local/lib/python3.9/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/usr/local/lib/python3.9/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/usr/local/lib/python3.9/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/usr/local/lib/python3.9/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/usr/local/lib/python3.9/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/usr/local/lib/python3.9/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/usr/local/lib/python3.9/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/usr/local/lib/python3.9/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/usr/local/lib/python3.9/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/usr/local/lib/python3.9/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/usr/local/lib/python3.9/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/usr/local/lib/python3.9/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/usr/local/lib/python3.9/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/usr/local/lib/python3.9/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/usr/local/lib/python3.9/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/usr/local/lib/python3.9/site-packages/_pytest/unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/usr/local/lib/python3.9/site-packages/_pytest/threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/usr/local/lib/python3.9/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/usr/local/lib/python3.9/site-packages/pytest_cov/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_asyncio.plugin' from '/usr/local/lib/python3.9/site-packages/pytest_asyncio/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_cov.plugin.CovPlugin object at 0x7fda6f478070>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'tests.conftest' from '/workspaces/homeassistant-elasticsearch/tests/conftest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session homeassistant-elasticsearch exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7fda6d713ac0>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7fda6d713c40>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x7fda6d713d00>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7fda6d7220d0>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7fda6d746490>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x7fda6d746b80>
          manager: <_pytest.config.PytestPluginManager object at 0x7fda7010c490>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x7fda70069a60>
          startdir: /workspaces/homeassistant-elasticsearch
      finish pytest_report_header --> [['rootdir: /workspaces/homeassistant-elasticsearch, configfile: pytest.ini, testpaths: tests', 'plugins: cov-2.10.1, asyncio-0.14.0'], 'cachedir: .pytest_cache', ['using: pytest-6.2.1 pylib-1.10.0', 'setuptools registered plugins:', '  pytest-cov-2.10.1 at /usr/local/lib/python3.9/site-packages/pytest_cov/plugin.py', '  pytest-asyncio-0.14.0 at /usr/local/lib/python3.9/site-packages/pytest_asyncio/plugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session homeassistant-elasticsearch exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session homeassistant-elasticsearch exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['tests'] [collection]
        pytest_collectstart [hook]
            collector: <Session homeassistant-elasticsearch exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session homeassistant-elasticsearch exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument (local('/workspaces/homeassistant-elasticsearch/tests'), []) [collection]
            pytest_ignore_collect [hook]
                path: /workspaces/homeassistant-elasticsearch/tests/__init__.py
                config: <_pytest.config.Config object at 0x7fda70069a60>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /workspaces/homeassistant-elasticsearch/tests/__init__.py
                parent: <Session homeassistant-elasticsearch exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /workspaces/homeassistant-elasticsearch/tests/__init__.py
                  parent: <Session homeassistant-elasticsearch exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package tests> [hook]
            finish pytest_collect_file --> [<Package tests>] [hook]
            pytest_ignore_collect [hook]
                path: /workspaces/homeassistant-elasticsearch/tests/__init__.py
                config: <_pytest.config.Config object at 0x7fda70069a60>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /workspaces/homeassistant-elasticsearch/tests/__init__.py
                parent: <Session homeassistant-elasticsearch exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /workspaces/homeassistant-elasticsearch/tests/__init__.py
                  parent: <Session homeassistant-elasticsearch exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package tests> [hook]
            finish pytest_collect_file --> [<Package tests>] [hook]
            pytest_ignore_collect [hook]
                path: /workspaces/homeassistant-elasticsearch/tests/test_util
                config: <_pytest.config.Config object at 0x7fda70069a60>
            finish pytest_ignore_collect --> None [hook]
          early skip of rewriting module: py._code [assertion]
          early skip of rewriting module: py._code.code [assertion]
          early skip of rewriting module: repr [assertion]
            pytest_ignore_collect [hook]
                path: /workspaces/homeassistant-elasticsearch/tests/test_util/__init__.py
                config: <_pytest.config.Config object at 0x7fda70069a60>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /workspaces/homeassistant-elasticsearch/tests/test_util/__init__.py
                parent: <Session homeassistant-elasticsearch exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /workspaces/homeassistant-elasticsearch/tests/test_util/__init__.py
                  parent: <Session homeassistant-elasticsearch exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package test_util> [hook]
            finish pytest_collect_file --> [<Package test_util>] [hook]
            pytest_ignore_collect [hook]
                path: /workspaces/homeassistant-elasticsearch/tests/testing_config
                config: <_pytest.config.Config object at 0x7fda70069a60>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /workspaces/homeassistant-elasticsearch/tests/testing_config/.storage
                config: <_pytest.config.Config object at 0x7fda70069a60>
            finish pytest_ignore_collect --> None [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=2 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=2 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Package tests> [collection]
      pytest_collectstart [hook]
          collector: <Package tests>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package tests>
        pytest_ignore_collect [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/async_mock.py
            config: <_pytest.config.Config object at 0x7fda70069a60>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/async_mock.py
            parent: <Package tests>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/common.py
            config: <_pytest.config.Config object at 0x7fda70069a60>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/common.py
            parent: <Package tests>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/conftest.py
            config: <_pytest.config.Config object at 0x7fda70069a60>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/conftest.py
            parent: <Package tests>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/sample_data.py
            config: <_pytest.config.Config object at 0x7fda70069a60>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/sample_data.py
            parent: <Package tests>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/test_config_flow.py
            config: <_pytest.config.Config object at 0x7fda70069a60>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/test_config_flow.py
            parent: <Package tests>
          pytest_pycollect_makemodule [hook]
              path: /workspaces/homeassistant-elasticsearch/tests/test_config_flow.py
              parent: <Package tests>
          finish pytest_pycollect_makemodule --> <Module test_config_flow.py> [hook]
        finish pytest_collect_file --> [<Module test_config_flow.py>] [hook]
        pytest_ignore_collect [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/test_es_serializer.py
            config: <_pytest.config.Config object at 0x7fda70069a60>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/test_es_serializer.py
            parent: <Package tests>
          pytest_pycollect_makemodule [hook]
              path: /workspaces/homeassistant-elasticsearch/tests/test_es_serializer.py
              parent: <Package tests>
          finish pytest_pycollect_makemodule --> <Module test_es_serializer.py> [hook]
        finish pytest_collect_file --> [<Module test_es_serializer.py>] [hook]
        pytest_ignore_collect [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/test_util
            config: <_pytest.config.Config object at 0x7fda70069a60>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/test_util/__init__.py
            config: <_pytest.config.Config object at 0x7fda70069a60>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/testing_config
            config: <_pytest.config.Config object at 0x7fda70069a60>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/testing_config/.storage
            config: <_pytest.config.Config object at 0x7fda70069a60>
        finish pytest_ignore_collect --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/__init__.py' lenresult=2 outcome='passed'> [hook]
    genitems <Module test_config_flow.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_config_flow.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_config_flow.py>
      find_module called for: tests.test_config_flow [assertion]
      matched test file '/workspaces/homeassistant-elasticsearch/tests/test_config_flow.py' [assertion]
      found cached rewritten pyc for /workspaces/homeassistant-elasticsearch/tests/test_config_flow.py [assertion]
      early skip of rewriting module: tests.async_mock [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flow.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flow.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flow.py>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.9/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flow.py>
            name: DOMAIN
            obj: elastic
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flow.py>
            name: data_entry_flow
            obj: <module 'homeassistant.data_entry_flow' from '/usr/local/lib/python3.9/site-packages/homeassistant/data_entry_flow.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flow.py>
            name: SOURCE_USER
            obj: user
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flow.py>
            name: HomeAssistantType
            obj: <class 'homeassistant.core.HomeAssistant'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flow.py>
            name: MockESGateway
            obj: <class 'tests.common.MockESGateway'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flow.py>
            name: MockESIntegration
            obj: <class 'tests.common.MockESIntegration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flow.py>
            name: patch
            obj: <function patch at 0x7fda6da86c10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flow.py>
            name: test_user_flow_minimum_fields
            obj: <function test_user_flow_minimum_fields at 0x7fda6d705f70>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7fda6d708f40>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_user_flow_minimum_fields>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flow.py>
            name: test_user_flow_to_tls_flow
            obj: <function test_user_flow_to_tls_flow at 0x7fda6d710160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7fda6d708f40>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_user_flow_to_tls_flow>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_flow.py>
            name: test_flow_fails_es_unavailable
            obj: <function test_flow_fails_es_unavailable at 0x7fda6d7103a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7fda6d708f40>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_flow_fails_es_unavailable>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_config_flow.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_user_flow_minimum_fields> [collection]
      pytest_itemcollected [hook]
          item: <Function test_user_flow_minimum_fields>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_user_flow_to_tls_flow> [collection]
      pytest_itemcollected [hook]
          item: <Function test_user_flow_to_tls_flow>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_flow_fails_es_unavailable> [collection]
      pytest_itemcollected [hook]
          item: <Function test_flow_fails_es_unavailable>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_config_flow.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_es_serializer.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_es_serializer.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_es_serializer.py>
      find_module called for: tests.test_es_serializer [assertion]
      matched test file '/workspaces/homeassistant-elasticsearch/tests/test_es_serializer.py' [assertion]
      found cached rewritten pyc for /workspaces/homeassistant-elasticsearch/tests/test_es_serializer.py [assertion]
      early skip of rewriting module: tests.sample_data [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_es_serializer.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_es_serializer.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_es_serializer.py>
            name: json
            obj: <module 'json' from '/usr/local/lib/python3.9/json/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_es_serializer.py>
            name: get_serializer
            obj: <function get_serializer at 0x7fda6d9d69d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_es_serializer.py>
            name: create_sample_state
            obj: <function create_sample_state at 0x7fda6d6e5040>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_es_serializer.py>
            name: test_simple_entry
            obj: <function test_simple_entry at 0x7fda6d705670>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7fda6d692a60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_simple_entry>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_es_serializer.py>
            name: test_entry_with_set
            obj: <function test_entry_with_set at 0x7fda6d7104c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7fda6d692280>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_entry_with_set>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_es_serializer.py' lenresult=2 outcome='passed'> [hook]
    genitems <Function test_simple_entry> [collection]
      pytest_itemcollected [hook]
          item: <Function test_simple_entry>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_entry_with_set> [collection]
      pytest_itemcollected [hook]
          item: <Function test_entry_with_set>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_es_serializer.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/__init__.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package test_util> [collection]
      pytest_collectstart [hook]
          collector: <Package test_util>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package test_util>
        pytest_ignore_collect [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/test_util/aiohttp.py
            config: <_pytest.config.Config object at 0x7fda70069a60>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/test_util/aiohttp.py
            parent: <Package test_util>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/test_util/test_aiohttp.py
            config: <_pytest.config.Config object at 0x7fda70069a60>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /workspaces/homeassistant-elasticsearch/tests/test_util/test_aiohttp.py
            parent: <Package test_util>
          pytest_pycollect_makemodule [hook]
              path: /workspaces/homeassistant-elasticsearch/tests/test_util/test_aiohttp.py
              parent: <Package test_util>
          finish pytest_pycollect_makemodule --> <Module test_aiohttp.py> [hook]
        finish pytest_collect_file --> [<Module test_aiohttp.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_util/__init__.py' lenresult=1 outcome='passed'> [hook]
    genitems <Module test_aiohttp.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_aiohttp.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_aiohttp.py>
      find_module called for: tests.test_util.test_aiohttp [assertion]
      matched test file '/workspaces/homeassistant-elasticsearch/tests/test_util/test_aiohttp.py' [assertion]
      found cached rewritten pyc for /workspaces/homeassistant-elasticsearch/tests/test_util/test_aiohttp.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_aiohttp.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_aiohttp.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.9/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_aiohttp.py>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.9/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_aiohttp.py>
            name: AiohttpClientMocker
            obj: <class 'tests.test_util.aiohttp.AiohttpClientMocker'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_aiohttp.py>
            name: test_matching_url
            obj: <function test_matching_url at 0x7fda6d710820>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7fda6d7081c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_matching_url>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_util/test_aiohttp.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_matching_url> [collection]
      pytest_itemcollected [hook]
          item: <Function test_matching_url>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_util/test_aiohttp.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_util/__init__.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session homeassistant-elasticsearch exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x7fda70069a60>
          items: [<Function test_user_flow_minimum_fields>, <Function test_user_flow_to_tls_flow>, <Function test_flow_fails_es_unavailable>, <Function test_simple_entry>, <Function test_entry_with_set>, <Function test_matching_url>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session homeassistant-elasticsearch exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x7fda70069a60>
            startdir: /workspaces/homeassistant-elasticsearch
            items: [<Function test_user_flow_minimum_fields>, <Function test_user_flow_to_tls_flow>, <Function test_flow_fails_es_unavailable>, <Function test_simple_entry>, <Function test_entry_with_set>, <Function test_matching_url>]
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session homeassistant-elasticsearch exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=6>
      pytest_runtest_protocol [hook]
          item: <Function test_user_flow_minimum_fields>
          nextitem: <Function test_user_flow_to_tls_flow>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_config_flow.py::test_user_flow_minimum_fields
            location: ('tests/test_config_flow.py', 10, 'test_user_flow_minimum_fields')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_user_flow_minimum_fields>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_user_flow_minimum_fields>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path_factory' scope='session' baseid=''>
              request: <SubRequest 'tmp_path_factory' for <Function test_user_flow_minimum_fields>>
          finish pytest_fixture_setup --> TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7fda6d713f10>, _basetemp=None) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_user_flow_minimum_fields>>
          early skip of rewriting module: getpass [assertion]
          early skip of rewriting module: termios [assertion]
          new basetemp /tmp/pytest-of-root/pytest-21 [config:tmpdir]
          mktemp /tmp/pytest-of-root/pytest-21/test_user_flow_minimum_fields0 [config:tmpdir]
          finish pytest_fixture_setup --> /tmp/pytest-of-root/pytest-21/test_user_flow_minimum_fields0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmpdir' scope='function' baseid=''>
              request: <SubRequest 'tmpdir' for <Function test_user_flow_minimum_fields>>
          finish pytest_fixture_setup --> /tmp/pytest-of-root/pytest-21/test_user_flow_minimum_fields0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='hass' scope='function' baseid='tests'>
              request: <SubRequest 'hass' for <Function test_user_flow_minimum_fields>>
          finish pytest_fixture_setup --> <homeassistant.core.HomeAssistant object at 0x7fda6d69feb0> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_user_flow_minimum_fields>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flow.py::test_user_flow_minimum_fields' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flow.py::test_user_flow_minimum_fields' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flow.py::test_user_flow_minimum_fields' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7fda70069a60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_user_flow_minimum_fields>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_user_flow_minimum_fields>
          early skip of rewriting module: custom_components.elastic.config_flow [assertion]
          early skip of rewriting module: custom_components.persistent_notification [assertion]
          early skip of rewriting module: homeassistant.components.persistent_notification [assertion]
          early skip of rewriting module: homeassistant.components.websocket_api [assertion]
          early skip of rewriting module: homeassistant.components.websocket_api.commands [assertion]
          early skip of rewriting module: homeassistant.components.websocket_api.const [assertion]
          early skip of rewriting module: homeassistant.components.websocket_api.decorators [assertion]
          early skip of rewriting module: homeassistant.components.websocket_api.messages [assertion]
          early skip of rewriting module: homeassistant.components.websocket_api.connection [assertion]
          early skip of rewriting module: homeassistant.components.websocket_api.http [assertion]
          early skip of rewriting module: homeassistant.components.websocket_api.auth [assertion]
          early skip of rewriting module: homeassistant.components.websocket_api.error [assertion]
          early skip of rewriting module: custom_components.elastic.config [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_user_flow_minimum_fields>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flow.py::test_user_flow_minimum_fields' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flow.py::test_user_flow_minimum_fields' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flow.py::test_user_flow_minimum_fields' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7fda70069a60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_user_flow_minimum_fields>
            nextitem: <Function test_user_flow_to_tls_flow>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='hass' scope='function' baseid='tests'>
              request: <SubRequest 'hass' for <Function test_user_flow_minimum_fields>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='hass' scope='function' baseid='tests'>
              request: <SubRequest 'hass' for <Function test_user_flow_minimum_fields>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmpdir' scope='function' baseid=''>
              request: <SubRequest 'tmpdir' for <Function test_user_flow_minimum_fields>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmpdir' scope='function' baseid=''>
              request: <SubRequest 'tmpdir' for <Function test_user_flow_minimum_fields>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_user_flow_minimum_fields>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='hass' scope='function' baseid='tests'>
              request: <SubRequest 'hass' for <Function test_user_flow_minimum_fields>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_user_flow_minimum_fields>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_user_flow_minimum_fields>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flow.py::test_user_flow_minimum_fields' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flow.py::test_user_flow_minimum_fields' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flow.py::test_user_flow_minimum_fields' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7fda70069a60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_config_flow.py::test_user_flow_minimum_fields
            location: ('tests/test_config_flow.py', 10, 'test_user_flow_minimum_fields')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_user_flow_to_tls_flow>
          nextitem: <Function test_flow_fails_es_unavailable>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_config_flow.py::test_user_flow_to_tls_flow
            location: ('tests/test_config_flow.py', 36, 'test_user_flow_to_tls_flow')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_user_flow_to_tls_flow>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_user_flow_to_tls_flow>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_user_flow_to_tls_flow>>
          mktemp /tmp/pytest-of-root/pytest-21/test_user_flow_to_tls_flow0 [config:tmpdir]
          finish pytest_fixture_setup --> /tmp/pytest-of-root/pytest-21/test_user_flow_to_tls_flow0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmpdir' scope='function' baseid=''>
              request: <SubRequest 'tmpdir' for <Function test_user_flow_to_tls_flow>>
          finish pytest_fixture_setup --> /tmp/pytest-of-root/pytest-21/test_user_flow_to_tls_flow0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='hass' scope='function' baseid='tests'>
              request: <SubRequest 'hass' for <Function test_user_flow_to_tls_flow>>
          finish pytest_fixture_setup --> <homeassistant.core.HomeAssistant object at 0x7fda6cdc55e0> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_user_flow_to_tls_flow>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flow.py::test_user_flow_to_tls_flow' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flow.py::test_user_flow_to_tls_flow' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flow.py::test_user_flow_to_tls_flow' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7fda70069a60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_user_flow_to_tls_flow>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_user_flow_to_tls_flow>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_user_flow_to_tls_flow>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flow.py::test_user_flow_to_tls_flow' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flow.py::test_user_flow_to_tls_flow' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flow.py::test_user_flow_to_tls_flow' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7fda70069a60>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_user_flow_to_tls_flow>
            nextitem: <Function test_flow_fails_es_unavailable>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='hass' scope='function' baseid='tests'>
              request: <SubRequest 'hass' for <Function test_user_flow_to_tls_flow>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='hass' scope='function' baseid='tests'>
              request: <SubRequest 'hass' for <Function test_user_flow_to_tls_flow>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmpdir' scope='function' baseid=''>
              request: <SubRequest 'tmpdir' for <Function test_user_flow_to_tls_flow>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmpdir' scope='function' baseid=''>
              request: <SubRequest 'tmpdir' for <Function test_user_flow_to_tls_flow>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_user_flow_to_tls_flow>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='hass' scope='function' baseid='tests'>
              request: <SubRequest 'hass' for <Function test_user_flow_to_tls_flow>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_user_flow_to_tls_flow>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_user_flow_to_tls_flow>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flow.py::test_user_flow_to_tls_flow' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flow.py::test_user_flow_to_tls_flow' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flow.py::test_user_flow_to_tls_flow' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7fda70069a60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_config_flow.py::test_user_flow_to_tls_flow
            location: ('tests/test_config_flow.py', 36, 'test_user_flow_to_tls_flow')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_flow_fails_es_unavailable>
          nextitem: <Function test_simple_entry>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_config_flow.py::test_flow_fails_es_unavailable
            location: ('tests/test_config_flow.py', 56, 'test_flow_fails_es_unavailable')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_flow_fails_es_unavailable>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_flow_fails_es_unavailable>>
          finish pytest_fixture_setup --> <_UnixSelectorEventLoop running=False closed=False debug=False> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_flow_fails_es_unavailable>>
          mktemp /tmp/pytest-of-root/pytest-21/test_flow_fails_es_unavailable0 [config:tmpdir]
          finish pytest_fixture_setup --> /tmp/pytest-of-root/pytest-21/test_flow_fails_es_unavailable0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmpdir' scope='function' baseid=''>
              request: <SubRequest 'tmpdir' for <Function test_flow_fails_es_unavailable>>
          finish pytest_fixture_setup --> /tmp/pytest-of-root/pytest-21/test_flow_fails_es_unavailable0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='hass' scope='function' baseid='tests'>
              request: <SubRequest 'hass' for <Function test_flow_fails_es_unavailable>>
          finish pytest_fixture_setup --> <homeassistant.core.HomeAssistant object at 0x7fda6cdd3d30> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='aioclient_mock' scope='function' baseid='tests'>
              request: <SubRequest 'aioclient_mock' for <Function test_flow_fails_es_unavailable>>
          early skip of rewriting module: homeassistant.helpers.aiohttp_client [assertion]
          finish pytest_fixture_setup --> <tests.test_util.aiohttp.AiohttpClientMocker object at 0x7fda6cdd65b0> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_flow_fails_es_unavailable>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flow.py::test_flow_fails_es_unavailable' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flow.py::test_flow_fails_es_unavailable' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flow.py::test_flow_fails_es_unavailable' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7fda70069a60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_flow_fails_es_unavailable>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_flow_fails_es_unavailable>
          early skip of rewriting module: custom_components.persistent_notification [assertion]
          early skip of rewriting module: custom_components.elastic.config [assertion]
            pytest_assertrepr_compare [hook]
                config: <_pytest.config.Config object at 0x7fda70069a60>
                op: ==
                left: create_entry
                right: form
            finish pytest_assertrepr_compare --> [["'create_entry' == 'form'", '- form', '+ create_entry']] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_flow_fails_es_unavailable>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("assert 'create_entry' == 'form'\n  - form\n  + create_entry") tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flow.py::test_flow_fails_es_unavailable' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flow.py::test_flow_fails_es_unavailable' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flow.py::test_flow_fails_es_unavailable' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7fda70069a60>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_flow_fails_es_unavailable>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("assert 'create_entry' == 'form'\n  - form\n  + create_entry") tblen=1>>
            report: <TestReport 'tests/test_config_flow.py::test_flow_fails_es_unavailable' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_flow_fails_es_unavailable>
            nextitem: <Function test_simple_entry>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='aioclient_mock' scope='function' baseid='tests'>
              request: <SubRequest 'aioclient_mock' for <Function test_flow_fails_es_unavailable>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='hass' scope='function' baseid='tests'>
              request: <SubRequest 'hass' for <Function test_flow_fails_es_unavailable>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='hass' scope='function' baseid='tests'>
              request: <SubRequest 'hass' for <Function test_flow_fails_es_unavailable>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmpdir' scope='function' baseid=''>
              request: <SubRequest 'tmpdir' for <Function test_flow_fails_es_unavailable>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmpdir' scope='function' baseid=''>
              request: <SubRequest 'tmpdir' for <Function test_flow_fails_es_unavailable>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_flow_fails_es_unavailable>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='hass' scope='function' baseid='tests'>
              request: <SubRequest 'hass' for <Function test_flow_fails_es_unavailable>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='event_loop' scope='function' baseid=''>
              request: <SubRequest 'event_loop' for <Function test_flow_fails_es_unavailable>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_flow_fails_es_unavailable>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_config_flow.py::test_flow_fails_es_unavailable' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_config_flow.py::test_flow_fails_es_unavailable' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_config_flow.py::test_flow_fails_es_unavailable' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7fda70069a60>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_config_flow.py::test_flow_fails_es_unavailable
            location: ('tests/test_config_flow.py', 56, 'test_flow_fails_es_unavailable')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session homeassistant-elasticsearch exitstatus=<ExitCode.TESTS_FAILED: 1> testsfailed=1 testscollected=6>
        exitstatus: ExitCode.TESTS_FAILED
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
          request: <SubRequest 'tmp_path' for <Function test_flow_fails_es_unavailable>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
          request: <SubRequest 'tmp_path' for <Function test_user_flow_to_tls_flow>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
          request: <SubRequest 'tmp_path' for <Function test_user_flow_minimum_fields>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='tmp_path_factory' scope='session' baseid=''>
          request: <SubRequest 'tmp_path_factory' for <Function test_flow_fails_es_unavailable>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='tmp_path_factory' scope='session' baseid=''>
          request: <SubRequest 'tmp_path_factory' for <Function test_user_flow_to_tls_flow>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_fixture_post_finalizer [hook]
          fixturedef: <FixtureDef argname='tmp_path_factory' scope='session' baseid=''>
          request: <SubRequest 'tmp_path_factory' for <Function test_user_flow_minimum_fields>>
      finish pytest_fixture_post_finalizer --> [] [hook]
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x7fda6d7220d0>
          exitstatus: ExitCode.TESTS_FAILED
          config: <_pytest.config.Config object at 0x7fda70069a60>
      early skip of rewriting module: pygments [assertion]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/test_config_flow.py::test_flow_fails_es_unavailable' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7fda70069a60>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x7fda70069a60>
    finish pytest_unconfigure --> [] [hook]
